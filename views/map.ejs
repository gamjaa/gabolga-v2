<%- include('header') %>
<script src="/js/clipboard.min.js"></script>
<div id="map">
    <div id="now_pos">
        <a onclick="getGeo();"><img src="/img/iconmonstr-crosshair-9-2402.png" width="50px" height="50px"></a>
    </div>

    <% if (unregTweetsCount > 0) { %>
        <button id="unreg_tweets_count" class="btn btn-danger" onclick="location.href = '/my/list'">
            Ïû•ÏÜåÍ∞Ä ÎØ∏Îì±Î°ùÎêú Ìä∏ÏúóÏù¥ <%= unregTweetsCount %>Í∞ú ÏûàÏñ¥Ïöî. üò¢
        </div>
    <% } %>

    <div id="tweet_data">
        <script>
            function openRoute(e) {
                window.open(e.getAttribute('data-value'), '_blank');
            }
        </script>
        <div id="route_link">
            <a herf="#" title="Ïπ¥Ïπ¥Ïò§Îßµ(Îã§Ïùå ÏßÄÎèÑ) Í∏∏Ï∞æÍ∏∞" id="route_kakao" onclick="gtag('event', 'Îã§ÏùåÍ∏∏Ï∞æÍ∏∞'); openRoute(this)"><img src="/img/kakaomap_icon.png"></a>
            <a herf="#" title="ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ Í∏∏Ï∞æÍ∏∞" id="route_naver" onclick="gtag('event', 'ÎÑ§Ïù¥Î≤ÑÍ∏∏Ï∞æÍ∏∞'); openRoute(this)"><img src="/img/navermap_icon.png"></a>
        </div>
        <h3 id="tweet_name" class="text_ellipsis" title="Ìä∏Ïúó ÌéòÏù¥ÏßÄÏóêÏÑú ÏûêÏÑ∏Ìûà Î≥¥Í∏∞"></h3>
        <span id="tweet_road_address" class="text_ellipsis"></span> <button id="tweet_road_address_btn" class="btn btn-link btn-sm copy">Î≥µÏÇ¨</button><br>
        <span id="tweet_address" class="text-muted text_ellipsis"></span> <button id="tweet_address_btn" class="btn btn-link btn-sm copy">Î≥µÏÇ¨</button><br>
        <span id="tweet_phone" class="text_ellipsis"></span> <button id="tweet_phone_btn" class="btn btn-link btn-sm copy">Î≥µÏÇ¨</button>
    </div>
</div>
<script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=uwuqnx1j3m&submodules=geocoder"></script>
<script>
    const mapDiv = document.getElementById('map');
    const tweetDataDiv = document.getElementById('tweet_data');
    const tweetNameH = document.getElementById('tweet_name');
    const tweetRoadAddressSpan = document.getElementById('tweet_road_address');
    const tweetAddressSpan = document.getElementById('tweet_address');
    const tweetPhoneSpan = document.getElementById('tweet_phone');
    const tweetRoadAddressBtn = document.getElementById('tweet_road_address_btn');
    const tweetAddressBtn = document.getElementById('tweet_address_btn');
    const tweetPhoneBtn = document.getElementById('tweet_phone_btn');
    const routeKakaoA = document.getElementById('route_kakao');
    const routeNaverA = document.getElementById('route_naver');

    new Clipboard('.copy');
    const originalUrl = `<%= hostname %><%= req.baseUrl %><%= req.path %>`;

    const map = new naver.maps.Map(mapDiv, {
        useStyleMap: true,
    });

    const isAlreadyExistMarker = (name, position) => {
        return markers.some(marker => {
            const markerPos = marker.getPosition();
            return markerPos.x === position.x && markerPos.y === position.y && marker.getTitle() === name;
        });
    };

    const markers = [];
    let currentMarkerIndex = -1;
    const params = {
        tweet_id: '<%= req.query.tweet_id %>',
        lat: '<%= req.query.lat %>',
        lng: '<%= req.query.lng %>'
    };

    if (params.lat) {
        map.setCenter(params);
    }

    <% if (req.query.tweet_id) { %>
        const position = naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(<%= tweet.mapx %>, <%= tweet.mapy %>));
        if (!params.lat) {
            map.setCenter(position);
        }

        const marker = new naver.maps.Marker({
            position,
            map,
            title: '<%= tweet.name %>'
        });
        markers.push(marker);
        const click = () => {
            params.tweet_id = '<%= req.query.tweet_id %>';
            updateCurrentUrl(params);

            if (currentMarkerIndex >= 0) {
                markers[currentMarkerIndex].setIcon();
            }
            marker.setIcon('/img/pin_over.png');
            currentMarkerIndex = 0;

            tweetDataDiv.style.display = 'block';

            tweetNameH.innerHTML = `<a href="/tweet/<%= req.query.tweet_id %>"><%= tweet.name %></a>`;
            tweetRoadAddressSpan.textContent = '<%= tweet.road_address %>';
            tweetAddressSpan.textContent = `(<%= tweet.address %>)`;
            tweetPhoneSpan.textContent = '<%= tweet.phone %>';

            tweetRoadAddressBtn.style.display = '<%= tweet.road_address ? 'inline-block' : 'none' %>';
            tweetAddressBtn.style.display = '<%= tweet.address ? 'inline-block' : 'none' %>';
            tweetPhoneBtn.style.display = '<%= tweet.phone ? 'inline-block' : 'none' %>';
            tweetRoadAddressBtn.setAttribute('data-clipboard-text', '<%= tweet.road_address %>');
            tweetAddressBtn.setAttribute('data-clipboard-text', '<%= tweet.address %>');
            tweetPhoneBtn.setAttribute('data-clipboard-text', '<%= tweet.phone %>');

            routeKakaoA.setAttribute('data-value', `http://map.daum.net/link/to/<%= tweet.name %>,${position.lat()},${position.lng()}`);
            routeNaverA.setAttribute('data-value', `https://map.naver.com/?menu=route&etext=<%= tweet.name %>&elat=${position.lat()}&elng=${position.lng()}`);
        };
        click();
        naver.maps.Event.addListener(marker, "click", click);
    <% } %>

    const drawMarkers = () => {
        const bounds = map.getBounds();
        const min = naver.maps.TransCoord.fromLatLngToTM128(bounds.getMin());
        const max = naver.maps.TransCoord.fromLatLngToTM128(bounds.getMax());
        httpGet(`/api/map?minY=${min.y}&maxY=${max.y}&minX=${min.x}&maxX=${max.x}`, (rows) => {
            rows.forEach(row => {
                const position = naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(row.mapx, row.mapy));
                
                if (isAlreadyExistMarker(row.name, position)) {
                    return;
                }
                
                const marker = new naver.maps.Marker({
                    position,
                    map,
                    title: row.name
                });

                markers.push(marker);
                const index = markers.length - 1;

                naver.maps.Event.addListener(marker, "click", function(e) {                    
                    params.tweet_id = row.tweet_id;
                    updateCurrentUrl(params);

                    if (currentMarkerIndex >= 0) {
                        markers[currentMarkerIndex].setIcon();
                    }
                    marker.setIcon('/img/pin_over.png');
                    currentMarkerIndex = index;

                    tweetDataDiv.style.display = 'block';

                    tweetNameH.innerHTML = `<a href="/tweet/${row.tweet_id}">${row.name}</a>`;
                    tweetRoadAddressSpan.textContent = row.road_address;
                    tweetAddressSpan.textContent = `(${row.address})`;
                    tweetPhoneSpan.textContent = row.phone;

                    tweetRoadAddressBtn.style.display = row.road_address ? 'inline-block' : 'none';
                    tweetAddressBtn.style.display = row.address ? 'inline-block' : 'none';
                    tweetPhoneBtn.style.display = row.phone ? 'inline-block' : 'none';
                    tweetRoadAddressBtn.setAttribute('data-clipboard-text', row.road_address);
                    tweetAddressBtn.setAttribute('data-clipboard-text', row.address);
                    tweetPhoneBtn.setAttribute('data-clipboard-text', row.phone);

                    routeKakaoA.setAttribute('data-value', `http://map.daum.net/link/to/${row.name},${position.lat()},${position.lng()}`);
                    routeNaverA.setAttribute('data-value', `https://map.naver.com/?menu=route&etext=${row.name}&elat=${position.lat()}&elng=${position.lng()}`);                    
                });
            });
        });
    };

    naver.maps.Event.addListener(map, 'click', function(e) {
        params.tweet_id = undefined;
        updateCurrentUrl(params);

        tweetDataDiv.style.display = 'none';
        if (currentMarkerIndex >= 0) {
            markers[currentMarkerIndex].setIcon();
            currentMarkerIndex = -1;
        }
    });
    naver.maps.Event.addListener(map, 'idle', function(e) {
        const center = map.getCenter();
        params.lat = center.lat();
        params.lng = center.lng();
        updateCurrentUrl(params);

        drawMarkers();
    });

    const getGeo = function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                lat = position.coords.latitude;
                lng = position.coords.longitude;
                map.panTo(new naver.maps.LatLng(lat, lng));
            });
        } 
    };

    window.onload = drawMarkers;

    function httpGet(url, callback) {
        const http = new XMLHttpRequest();
        http.open('GET', url, true);
        http.onreadystatechange = function () {
            if (http.readyState === 4 && typeof callback === 'function') {
                callback(JSON.parse(http.responseText));
            }
        };
        http.send();
    }
    
    function updateCurrentUrl(params) {
        let paramsString = '';
        if (params.tweet_id) {
            paramsString += `tweet_id=${params.tweet_id}`;
        }
        if (params.lat) {
            const centerParam = `lat=${params.lat}&lng=${params.lng}`;
            paramsString += paramsString ? `&${centerParam}` : centerParam;
        }

        history.replaceState(null, null, originalUrl + `?${paramsString}`);
    }
</script>
<%- include('footer') %>
