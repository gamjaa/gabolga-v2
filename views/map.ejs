<%- include('header') %>
<div style="position: fixed; top: 70px; left: 10px; width: 50px; height: 50px; z-index: 2;">
    <a onclick="isWatch = true; getGeo(watchID);"><img src="/img/iconmonstr-crosshair-9-2402.png" width="50px" height="50px"></a>
</div>
<div id="map"></div>
<script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?clientId=OkoqrDNq7sZ8zfy4x5To&submodules=geocoder"></script>
<script>
    const mapDiv = document.getElementById('map');
    const map = new naver.maps.Map(mapDiv);
    let watchID = null;
    let isWatch = false;
    let lat, lng;

    const markers = [];
    const drawMarkers = () => {
        const bounds = map.getBounds();
        const min = naver.maps.TransCoord.fromLatLngToTM128(bounds.getMin());
        const max = naver.maps.TransCoord.fromLatLngToTM128(bounds.getMax());
        httpGet(`/api/map?minX=${min.x}&maxX=${max.x}&minY=${min.y}&maxY=${max.y}`, (rows) => {
            markers.forEach(marker => marker.setMap(null));
            markers.length = 0;
            rows.forEach(row => {
                const position = naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(row.mapx, row.mapy));
                const marker = new naver.maps.Marker({
                    position,
                    map
                });
    
                const infowindow = new naver.maps.InfoWindow({
                    content: row.name
                });
    
                naver.maps.Event.addListener(marker, "mouseover", function(e) {
                    infowindow.open(map, marker);
                });

                naver.maps.Event.addListener(marker, "mouseout", function(e) {
                    infowindow.close();
                });

                naver.maps.Event.addListener(marker, "click", function(e) {
                    window.open(`/tweet/${row.tweet_id}`, '_blank');
                });

                markers.push(marker);
            });
        });
    };

    naver.maps.Event.addListener(map, 'dragstart', function(e) {
        watchID = null;
        isWatch = false;
    });
    naver.maps.Event.addListener(map, 'dragend', function(e) {
        drawMarkers();
    });
    naver.maps.Event.addListener(map, 'zoom_changed', function(level) {
        drawMarkers();
    });

    const moveMap = (lat, lng) => {
        map.panTo(new naver.maps.LatLng(lat, lng));
        drawMarkers();
    };

    const getGeo = function(watchID) {
        if (lat && lng) {
            moveMap(lat, lng);
        }

        watchID = navigator.geolocation.watchPosition(function(position) {
            if (isWatch) {
                moveMap(position.coords.latitude, position.coords.longitude);
                lat = position.coords.latitude;
                lng = position.coords.longitude;
            }
        });
    }

    window.onload = function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                lat = position.coords.latitude;
                lng = position.coords.longitude;
                moveMap(lat, lng);
            });
        } 
        // 초기 로딩
        drawMarkers();
    };

    function httpGet(url, callback) {
        const http = new XMLHttpRequest();
        http.open('GET', url, true);
        http.onreadystatechange = function () {
            if (http.readyState === 4 && typeof callback === 'function') {
                callback(JSON.parse(http.responseText));
            }
        };
        http.send();
    }
</script>
<%- include('footer') %>
