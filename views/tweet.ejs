<%- include('header'); -%>
<script src="/js/clipboard.min.js"></script>
<script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?clientId=OkoqrDNq7sZ8zfy4x5To&submodules=geocoder"></script>
<div id="map">
    <div id="map_pop">
      <script>let isShowTweet = true;</script>
  
      <button id="tweet_switch" onclick="tweetSwitch(isShowTweet)" class="btn btn-sm btn-primary">숨기기</button>
  
      <div id="tweet">
        <%- tweetHtml %>
      </div>
      <div id="padding"></div>
  
      <script>
      const tweetSwitch = (i) => {
        if (i) {
          document.getElementById('tweet').style.display = 'block';
          document.getElementById('tweet_switch').innerText = '숨기기';
          document.getElementById('padding').style.paddingBottom = '0';
          isShowTweet = false;
        } else {
          document.getElementById('tweet').style.display = 'none';
          document.getElementById('tweet_switch').innerText = '트윗 보이기';
          document.getElementById('padding').style.paddingBottom = '40px';
          isShowTweet = true;
        }
      };

      document.body.scrollTop = 0;
      if (window.innerHeight < 900) {
        tweetSwitch(false);
      }
      window.onresize = function() {
        document.body.scrollTop = 0;
        if (window.innerHeight < 650) {
          tweetSwitch(false);
        } else {
          tweetSwitch(true);
        }
      };
      </script>
  
      <% if (!req.session.isLogin && !isRegistered) { %>
      <div class="alert alert-primary center" role="alert">
        <a href="/login?refer=<%= req.originalUrl %>" onclick="gtag('event', '로그인')">로그인해서 장소를 등록해주세요!</a>
      </div>
      <% } %>
  
      <div id="data">
        <% if (isRegistered) { %>
          <% if (name) { %>
            <div id="route_link">
              <script>
                const point = naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(<%= mapx %>, <%= mapy %>));
                const openRoute = (app) => {
                  if (app === 'kakao') {
                    return window.open(`http://map.daum.net/link/to/<%= name %>,${point.lat()},${point.lng()}`, '_blank');
                  }

                  return window.open(`https://map.naver.com/?menu=route&etext=<%= name %>&elat=${point.lat()}&elng=${point.lng()}`, '_blank');
                }
              </script>
              <a herf="#" title="카카오맵(다음 지도) 길찾기" onclick="gtag('event', '다음길찾기'); openRoute('kakao')"><img src="/img/kakaomap_icon.png"></a>
              <a herf="#" title="네이버 지도 길찾기" onclick="gtag('event', '네이버길찾기'); openRoute('naver')"><img src="/img/navermap_icon.png"></a>
            </div>
          <% } %>
        <div id="gabolga">
          <h3><%= name %></h3>
          <% if (roadAddress) { %>
            <%= roadAddress %> <button class="btn btn-link btn-sm copy" data-clipboard-text="<%= roadAddress %>">복사</button><br>
            <span class="text-muted">(<%= address %>)</span> <button class="btn btn-link btn-sm copy" data-clipboard-text="<%= address %>">복사</button><br>
          <% } else { %>
            <%= address %> <button class="btn btn-link btn-sm copy" data-clipboard-text="<%= address %>">복사</button><br>
          <% } %>
  
          <% if (phone) { %>
            <%= phone %> <button class="btn btn-link btn-sm copy" data-clipboard-text="<%= phone %>">복사</button><br>
          <% } %>
  
          <% if (isGabolga) { %>
            <button id="btn_gabolga" class="btn btn-danger" onclick="gabolga()">가볼가 취소</button>
          <% } else if (req.session.isLogin) { %>
            <button id="btn_gabolga" class="btn btn-primary" onclick="gabolga()">가볼가 하기</button>
          <% } else { %>
            <div class="alert alert-primary center" role="alert" >
              <a href="/login?refer=<%= req.originalUrl %>" onclick="gtag('event', '로그인')">로그인해서 내 지도에 등록해보세요!</a>
            </div>
          <% } %>
        </div>
        <% } %>
  
        <% if (!isRegistered && req.session.isLogin) { %>
        <div class="option">
          <form onsubmit="searchPlaces(); return false;">
            <div class="input-group">
              <input type="text" id="keyword" placeholder="장소명" size="15" class="form-control">
              <span class="input-group-btn">
                <button class="btn btn-primary" type="submit">검색</button>
              </span>
            </div>
          </form>
        </div>
        <ul id="placesList" style="height: 200px; overflow-y: auto;">
        트윗에 해당하는 장소를 등록해주세요 ;^;<br><br>
        1. 트윗 내용에 맞는 장소명을 검색한다.<br>
        2. 해당하는 장소를 리스트나 지도에서 클릭한다.
        </ul>
        <div id="pagination"></div>
        <% } %>
      </div>
    </div>
</div>
<script>
  function httpGet(url, callback) {
    const http = new XMLHttpRequest();
    http.open('GET', url, true);
    http.onreadystatechange = function () {
      if (http.readyState === 4 && typeof callback === 'function') {
        callback(JSON.parse(http.responseText));
      }
    };
    http.send();
  }

  const mapDiv = document.getElementById('map');

<% if (isRegistered) { %>
  new Clipboard('.copy');
  const map = new naver.maps.Map(mapDiv, {
    center: new naver.maps.LatLng(point.lat() + 0.002, point.lng()),
    level: 3
  });
  const marker = new naver.maps.Marker({
    map, position: new naver.maps.LatLng(point.lat(), point.lng())
  });
  
  const btn = document.getElementById('btn_gabolga');
  const gabolga = () => {
    httpGet('/api/gabolga/<%= id %>', ({isGabolga}) => {
      if (isGabolga) {
        gtag('event', '가볼가하기');
        btn.innerText = '가볼가 취소';
        btn.classList.add('btn-danger');
        btn.classList.remove('btn-primary');
      } else {
        gtag('event', '가볼가취소');
        btn.innerText = '가볼가 하기';
        btn.classList.add('btn-primary');
        btn.classList.remove('btn-danger');
      }
    });
  }
  <% } else { %>
  const map = new naver.maps.Map(mapDiv);
  const markers = [];
  const infowindows = [];
  const searchedItems = [];

  const putData = (i) => {
    if (confirm(`'${searchedItems[i].name}'(으)로 등록하시겠습니까?`)) {
      gtag('event', '장소등록');
      
      const http = new XMLHttpRequest();
      http.open('PUT', '/tweet/<%= id %>', true);
      http.setRequestHeader('Content-type','application/json; charset=utf-8');
      http.onreadystatechange = function () {
        if (http.readyState === 4 && http.status === 200) {
          location.replace('/tweet/<%= id %>');
        }
      };
      http.send(JSON.stringify({
        name: searchedItems[i].name,
        phone: searchedItems[i].phone,
        address: searchedItems[i].address,
        road_address: searchedItems[i].road_address,
        mapx: searchedItems[i].mapx,
        mapy: searchedItems[i].mapy,
      }));
    }
  };

  const placesListUl = document.getElementById('placesList');

  const onMouseOver = (index) => {
    markers[index].setIcon({
      url: '/img/sp_pins_spot_v3_over.png',
      size: new naver.maps.Size(24, 37),
      anchor: new naver.maps.Point(12, 37),
      origin: new naver.maps.Point(index * 29, 0)
    });
    infowindows[index].open(map, markers[index]);
  };

  const onMouseOut = (index) => {
    markers[index].setIcon({
      url: '/img/sp_pins_spot_v3.png',
      size: new naver.maps.Size(24, 37),
      anchor: new naver.maps.Point(12, 37),
      origin: new naver.maps.Point(index * 29, 0)
    });
    infowindows[index].close();
  };

  const getSearchData = (keyword, start) => {
    httpGet(`/api/searchLocal?query=${encodeURI(keyword)}&start=${start}`, ({total, start, display, items}) => {
      markers.forEach(marker => marker.setMap(null));
      markers.length = 0;
      infowindows.length = 0;
      searchedItems.length = 0;

      removeAllChildNods(placesListUl);

      if (total === 0) {
        const itemLi = document.createElement('li');
        itemLi.innerHTML = `'${keyword}'에 대한 검색 결과가 없습니다.`;
        placesListUl.appendChild(itemLi);
        return;
      }

      const bounds = [];
      
      items.forEach((item, index) => {
        searchedItems.push(item);
        
        // 마커 표시
        const position = naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(item.mapx, item.mapy));
        bounds.push(position);
        const marker = new naver.maps.Marker({
          position,
          map,
          icon: {
            url: '/img/sp_pins_spot_v3.png',
            size: new naver.maps.Size(24, 37),
            anchor: new naver.maps.Point(12, 37),
            origin: new naver.maps.Point(index * 29, 0)
          }
        });

        const infowindow = new naver.maps.InfoWindow({
          content: `${item.name} (${item.phone})`
        });

        naver.maps.Event.addListener(marker, "mouseover", () => onMouseOver(index));

        naver.maps.Event.addListener(marker, "mouseout", () => onMouseOut(index));

        naver.maps.Event.addListener(marker, "click", function(e) {
          putData(index);
        });

        markers.push(marker);
        infowindows.push(infowindow);

        // 검색 데이터 표시
        const itemLi = getListItem(index, item);
        itemLi.onclick = (e) => putData(index);
        itemLi.onmouseover = (e) => {
          map.panTo(position);
          onMouseOver(index);
        };
        itemLi.onmouseout = () => onMouseOut(index);

        placesListUl.appendChild(itemLi);
      });
      
      // 페이지 번호 표시

      map.fitBounds(bounds);
    });
  };

  const searchPlaces = () => {
    const keyword = document.getElementById('keyword').value.replace(/^\s+|\s+$/g, '');
    if (!keyword) {
      alert('키워드를 입력해주세요!');
      return false;
    }
    
    placesListUl.innerText = '검색 중...';
    placesListUl.scrollTop = 0;
    getSearchData(keyword, 1);
  };

  // 검색결과 항목을 Element로 반환하는 함수입니다
  function getListItem(index, item) {
      const el = document.createElement('li');
      let itemStr = `<span class="markerbg marker_${index + 1}"></span>
      <div class="info">
        <h5>${item.name}</h5>`;
      if (item.road_address) {
          itemStr += `<span>${item.road_address}</span><span class="jibun gray">${item.address}</span>`;
      } else {
          itemStr += `<span>${item.address}</span>`;
      }
      itemStr += `<span class="tel">${item.phone}</span></div>`;
      el.innerHTML = itemStr;
      el.className = 'item';
      return el;
  }

  // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
  function displayPagination(pagination) {
      var paginationEl = document.getElementById('pagination'),
          fragment = document.createDocumentFragment(),
          i;
      // 기존에 추가된 페이지번호를 삭제합니다
      while (paginationEl.hasChildNodes()) {
          paginationEl.removeChild (paginationEl.lastChild);
      }
      for (i=1; i<=pagination.last; i++) {
          var el = document.createElement('a');
          el.href = "#";
          el.innerHTML = i;
          if (i===pagination.current) {
              el.className = 'on';
          } else {
              el.onclick = (function(i) {
                  return function() {
                      pagination.gotoPage(i);
                  }
              })(i);
          }
          fragment.appendChild(el);
      }
      paginationEl.appendChild(fragment);
  }
  // 검색결과 목록의 자식 Element를 제거하는 함수입니다
  function removeAllChildNods(el) {
    while (el.hasChildNodes()) {
      el.removeChild (el.lastChild);
    }
  }
<% } %>
</script>
<%- include('footer'); -%>